#!/bin/bash
e="\x1b[";c=$e"39;49;00m";y=$e"33;01m";cy=$e"36;01m";r=$e"1;31m";
##########################################################
#                                                        #
#           Carliv Image Kitchen for Android             #
#     boot+recovery images copyright-2015 carliv@xda     #
#    including support for MTK powered phones images     #
#                                                        #
##########################################################
abort() { cd "$PWD"; echo " "; echo -e "$cy >>$c$r Exit script$c\n";
read -rsp $'Press any key to continue...\n' -n1 key;clear; }
###########################################################
bin="`dirname $BASH_SOURCE`/.bin";
chmod -R 755 "$bin"/*;
cd "`dirname $BASH_SOURCE`";
###########################################################
echo -e "
**********************************************************
*                                                        *
*        $cy Carliv Image Kitchen for Android$c v0.1          *
*     boot+recovery images copyright-2015$cy carliv@xda$c     *
*    including support for MTK powered phones images     *
*                      LINUX version                     *
*                The repacking images script             *
*                                                        *
********************************************************** 
";
###########################################################
if [ ! "$1" ]; 
	then
	echo -e "$r No folder selected. ERROR!$c";
	abort;
	exit 1;
fi;
###########################################################
echo "Processing your folder.";
echo " ";
wfolder=$(basename "$1");
cd "$wfolder";
###########################################################
echo "Start repacking the image....";
echo " ";
getfile=$(find . -name "*.img-kernel");
myname="${getfile%.*}";
kernel="$myname".img-kernel;
if [[ ! -e "$kernel" ]];
	then
	echo -e "$r The$c$y kernel$c$r file is missing. Check your folder!. ERROR!$c";
	abort;
	exit 1;
fi;
echo -e "The kernel is:$y $kernel$c";
echo " ";
echo -e "Getting the$y ramdisk$c compression....";
echo " ";
if [ ! -d "ramdisk" ];
	then
	echo -e "$r The$c$y ramdisk$c$r folder is missing. Check your folder!. ERROR!$c";
	abort;
	exit 1;
fi;
compress=$(cat "$myname".img-ramdisk-compress);
echo -e "Compression used:$y $compress$c";
echo " ";
###########################################################
if [ "$compress" == "gz" ];
	then
	"$bin"/mkbootfs ramdisk | gzip > "$myname".img-ramdisk.gz;
	ramdisk="$myname".img-ramdisk.gz;
	echo -e "The ramdisk is:$y $ramdisk$c";
	if [ ! $? -eq "0" ]; 
	then
	  echo -e "$r The$c$y ramdisk$c$r repacking process failed. Check on screen printed errors and find a solution. ERROR!$c";
	  abort;
	  exit 1;
	fi;
fi;
if [ "$compress" == "lzma" ];
	then
	"$bin"/mkbootfs ramdisk | xz -Flzma > "$myname".img-ramdisk.lzma;
	ramdisk="$myname".img-ramdisk.lzma;
	echo -e "The ramdisk is:$y $ramdisk$c";
	if [ ! $? -eq "0" ]; 
	then
	  echo -e "$r The$c$y ramdisk$c$r repacking process failed. Check on screen printed errors and find a solution. ERROR!$c";
	  abort;
	  exit 1;
	fi;
fi;
if [ "$compress" == "xz" ];
	then
	"$bin"/mkbootfs ramdisk | xz -1 -Ccrc32 > "$myname".img-ramdisk.xz;
	ramdisk="$myname".img-ramdisk.xz;
	echo -e "The ramdisk is:$y $ramdisk$c";
	if [ ! $? -eq "0" ]; 
	then
	  echo -e "$r The$c$y ramdisk$c$r repacking process failed. Check on screen printed errors and find a solution. ERROR!$c";
	  abort;
	  exit 1;
	fi;
fi;
if [ "$compress" == "bz2" ];
	then
	"$bin"/mkbootfs ramdisk | bzip2 > "$myname".img-ramdisk.bz2;
	ramdisk="$myname".img-ramdisk.bz2;
	echo "The ramdisk is: $ramdisk";
	if [ ! $? -eq "0" ]; 
	then
	  echo -e "$r The$c$y ramdisk$c$r repacking process failed. Check on screen printed errors and find a solution. ERROR!$c";
	  abort;
	  exit 1;
	fi;
fi;
echo " ";
###########################################################
echo " ";
echo "Getting the image repacking arguments....";
echo " ";
######################### BOARD ###########################
if [[ -f "$myname".img-board ]];
	then
	bname=$(cat "$myname".img-board);
	echo -e "Board:$y             $bname$c";echo " ";
fi;
########################## BASE ############################
if [[ -f "$myname".img-base ]];
	then
	base=$(cat "$myname".img-base);
	echo -e "Base:$y              $base$c";echo " ";
fi;
######################## PAGESIZE ##########################
if [[ -f "$myname".img-pagesize ]];
	then
	pagesize=$(cat "$myname".img-pagesize);
	echo -e "Pagesize:$y          $pagesize$c";echo " ";
fi;
######################## CMDLINE ###########################
if [[ -f "$myname".img-cmdline ]];
	then
	lcmd=$(cat "$myname".img-cmdline);
	echo -e "Command line:$y      $lcmd$c";echo " ";
fi;
##################### KERNEL OFFSET ########################
if [[ -f "$myname".img-kernel_offset ]];
	then
	keoff=$(cat "$myname".img-kernel_offset);
	echo -e "Kernel offset:$y     $keoff$c";echo " ";
fi;
##################### RAMDISK OFFSET #######################
if [[ -f "$myname".img-ramdisk_offset ]];
	then
	ramoff=$(cat "$myname".img-ramdisk_offset);
	echo -e "Ramdisk offset:$y    $ramoff$c";echo " ";
fi;
###################### SECOND OFFSET ########################
if [[ -f "$myname".img-second_offset ]];
	then
	losec=$(cat "$myname".img-second_offset);
	echo -e "Second offset:$y     $losec$c";echo " ";	
fi;
#################### SECOND BOOTLOADER ######################
if [[ -f "$myname".img-second ]];
	then
	secboot="$myname".img-second;
	second=" --second $secboot";
	echo -e "Second bootloader:$y $secboot$c";echo " ";
fi;
###################### TAGS OFFSET ##########################
if [[ -f "$myname".img-tags_offset ]];
	then
	tagoff=$(cat "$myname".img-tags_offset);
	echo -e "Tags offset:$y       $tagoff$c";echo " ";
fi;
############################ DT ##############################
if [[ -f "$myname".img-dt ]];
	then
	ldtb="$myname".img-dt;
	dtb=" --dt $ldtb";
	echo -e "Device tree blob:$y  $ldtb$c";echo " ";
fi;
echo -e "Please enter the desired name for the new repacked image without extension (img).\nEg :$y boot$c-stock-2201 or carliv-"$y"recovery$c-30 or$y boot$c-new\n" 

read -e -p "Please enter the name : " newimage;
case "$newimage" in
  *\ *)
    echo -e "$r The name contains spaces. Please enter a name without spaces. ERROR!$c";
    abort;
    exit 1;;
esac;
case "$newimage" in
  *.*)
    echo -e "$r The name contains dots or you have entered the extension too.$c\n$r Please enter a name without dots or extension. ERROR!$c";
    abort;
    exit 1;;
esac;
if [[ $newimage = *boot* ]] || [[ $newimage = *recovery* ]];
	then
	echo " ";
	echo -e "Your new image name:$y $newimage.img$c";
	else
	echo -e "\n$r The image name doesn't include the type of image, as$c$y boot$c$r or$c$y recovery$c.\n$r You must include that in name. ERROR!$c";
	abort;
	exit 1;
fi;
echo " ";
echo "Executing the repacking command...."
echo " ";
"$bin"/mkbootimg --kernel "$kernel" --ramdisk "$ramdisk" --pagesize "$pagesize" --cmdline "$lcmd" --board "$bname" --base "$base" --kernel_offset "$keoff" --ramdisk_offset "$ramoff" --tags_offset "$tagoff" --second_offset "$losec"$second$dtb -o ../"$newimage".img;
if [ ! $? -eq "0" ]; 
	then
	abort;
	exit 1;
fi;
compramdisk="$myname".img-ramdisk."$compress";
rm -f "$compramdisk";
cd ../;
echo " ";
###########################################################
echo -e "Done! Your new image is packed as$y $newimage.img$c.";
echo " ";
abort;
